[{"content":"0 前言 本文内容比较杂乱, 无法保证实时更新, 如果遇到问题, 可以在 github 查看最新的配置:\nhugo 相关配置 docker 相关配置 研究 hugo 建站之初是打算采用 Github Pages 来发布静态博客\n优点 仅需一个 github 账号和简单配置即可将静态博客发布到 github pages 没有维护的时间成本, 可以将精力更多的放到博客内容本身上去 无需备案 无需 ssl 证书 缺点 访问速度较慢 访问速度较慢 访问速度较慢 虽说访问速度较慢可以通过各家的 cdn 加速来解决, 但由于刚开始建立 blog 选择的是 wordpress, 域名, 服务器, 备案, 证书等都已经一应俱全, 且之前的架构采用 docker, 添加一台 nginx 来跑 hugo 的静态网站是很方便的\n1 将博客部署到阿里云 整个步骤最难的地方可能就是 docker-compose 和 nginx 的配置了, 如果之前没有接触过可能会比较吃力, 因此我打包了一份开袋即食的配置文件, 只需要修改一些必要配置, 点此链接下载\n下载完将压缩包上传到自己的服务器, 解压后重命名为 blog (当然你可以用其他名字)\n下面正式开始部署:\n确保服务器公网 ip、安全组权限 (80/443), 域名绑定, ssl 证书等基础配置已经一应俱全 确保服务器安装了 docker 和 docker-compose 修改 blog/conf/nginx-hugo/nginx.conf 和 blog/conf/nginx-proxy/default.conf, 需要修改的地方在文件中已经标注出来了 将你的 ssl 证书放到 blog/ssl/ 目录下 在 blog 目录下执行 docker-compose up -d 即可启动容器 配置 twikoo 的前端代码, 见本文章节 3.2 将 hugo 生成的静态文件上传到 blog/data/hugo/ 目录, 见本文章节 2 至此已经配置完成, 应该可以通过域名访问 hugo 站点了, 后续更新内容只需要重复最后一步, 将 hugo 生成的静态文件上传到服务器即可\n所有的配置、应用数据、日志都保存在 blog 目录下, 你可以在不同的服务器上快速迁移 hugo 环境, 无需担心后续想要迁移新服务器时遇到的各种问题\n2 workflow 在这里简单介绍一下我从写博客 -\u0026gt; 发布到服务器 -\u0026gt; 归档备份的整个流程\n总体流程:\nobsidian 编辑文章, 图片通过 Image Auto Upload Plugin 插件配合 piclist 上传到阿里云 OSS, 具体配置和操作见 docker 部署 piclist 编辑完成后将通过 此脚本 将编辑后的文章更新到 hugo site 目录, 同时也是 git 仓库 使用 hugo server -D 预览变更, 如有问题重复前两个步骤 确认无误后通过 此脚本 生成静态文件, 并将文件远程同步到公网服务器, 完成博客内容变更 最后将 git 仓库的变更提交后同步到 github 远程仓库, 完成归档备份 其实如果使用 vscode 直接编辑 git 仓库中的博客文章可以让整个流程更加简化, 但是 vscode 的 markdown 编辑体验实在是比不上 typora 或者 obsidian, 工欲善其事必先利其器, 有了好的编辑体验才更愿意输出内容\n3 twikoo 3.1 部署 twikoo 官方提供了 丰富的部署方式, 考虑到访问速度, 本文使用的是 docker 方式部署到阿里云服务器\n如果是使用本文章节 1 步骤中的配置文件部署了 twikoo, 这步直接忽略, 配置前端代码即可\ndocker run --name twikoo -e TWIKOO_THROTTLE=1000 -p 8080:8080 -v ${PWD}/data:/app/data -d imaegoo/twikoo 部署完成后看到如下结果即成功\n[root@lvbibir ~]# curl http://localhost:8080 {\u0026#34;code\u0026#34;:100, \u0026#34;message\u0026#34;:\u0026#34;Twikoo 云函数运行正常, 请参考 https://twikoo.js.org/quick-start.html#%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2 完成前端的配置\u0026#34;, \u0026#34;version\u0026#34;:\u0026#34;1.6.7\u0026#34;} 后续最好套上反向代理, 加上域名和证书\n3.2 前端代码 创建或者修改 layouts\\partials\\comments.html\n\u0026lt;!-- Twikoo --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; style=\u0026#34;font-size: 20px;\u0026#34;\u0026gt;💬评论\u0026lt;/span\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#34;\u0026#34;, //填自己的, 例如：https://example.com el: \u0026#34;#tcomment\u0026#34;, lang: \u0026#39;zh-CN\u0026#39;, path: window.TWIKOO_MAGIC_PATH||window.location.pathname, }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 调用上述 twikoo 代码的位置：layouts/_default/single.html\n\u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; // 其他代码...... {{- if (.Param \u0026#34;comments\u0026#34;) }} {{- partial \u0026#34;comments.html\u0026#34; . }} {{- end }} \u0026lt;/article\u0026gt; 在站点配置文件 config 中加上版本号\nparams: twikoo: version: 1.6.7 3.3 更新 修改 dockerfile.yml 中的镜像 tag 部署新版本容器 docker-compose up -d 在 hugo 配置文件 config.yml 中修改 twikoo 版本 3.4 修改数据 直接修改 blog/data/twikoo/ 目录下的文件后重启容器, ❗慎重修改\n3.5 修改 smms 图床的 api 地址 已于 1.6.12 新版本修复, https://github.com/imaegoo/twikoo/releases/tag/1.6.12\n由于 sm.ms 域名国内无法访问, twikoo 官方还没有出具体的修改方式, 自己修改容器配置文件进行修改\n# 复制配置文件 [root@lvbibir blog]# docker cp twikoo:/app/node_modules/twikoo-func/utils/image.js /root/blog/conf/twikoo/ # 修改配置文件, 原来的配置是 https://sm.ms/api.v2/upload [root@lvbibir blog]# grep smms conf/twikoo/image.js } else if (config.IMAGE_CDN === \u0026#39;smms\u0026#39;) { const uploadResult = await axios.post(\u0026#39;https://smms.app/api/v2/upload\u0026#39;, formData, { # 将配置文件映射进容器内, 重启容器即可 [root@lvbibir blog]# grep twikoo docker-compose.yml twikoo: image: imaegoo/twikoo container_name: twikoo - $PWD/data/twikoo:/app/data - $PWD/conf/twikoo/image.js:/app/node_modules/twikoo-func/utils/image.js 4 Artitalk 官方文档\n需要注意的是如果使用的是国际版的 LeadCloud, 需要绑定自定义域名后才能正常访问\n4.1 leancloud 配置 前往 LeanCloud 国际版, 注册账号 注册完成之后根据 LeanCloud 的提示绑定手机号和邮箱 绑定完成之后点击 创建应用, 应用名称随意, 接着在 结构化数据 中创建 class, 命名为 shuoshuo 在你新建的应用中找到 结构化数据 下的 用户 点击 添加用户, 输入想用的用户名及密码 回到 结构化数据 中, 点击 class 下的 shuoshuo 找到权限, 在 Class 访问权限 中将 add_fields 以及 create 权限设置为指定用户, 输入你刚才输入的用户名会自动匹配为了安全起见, 将 delete 和 update 也设置为跟它们一样的权限 然后新建一个名为 atComment 的 class, 权限什么的使用默认的即可 点击 class 下的 _User 添加列, 列名称为 img, 默认值填上你这个账号想要用的发布说说的头像 url, 这一项不进行配置, 说说头像会显示为默认头像 —— Artitalk 的 logo 在最菜单栏中找到设置 -\u0026gt; 应用 keys, 记下来 AppID 和 AppKey , 一会会用 最后将 _User 中的权限全部调为指定用户, 或者数据创建者, 为了保证不被篡改用户数据以达到强制发布说说 在设置 -\u0026gt;域名绑定中绑定自定义域名 ❗ 关于设置权限的这几步 这几步一定要设置好, 才可以保证不被 “闲人” 破解发布说说的验证\n4.2 hugo 配置 新增 content/talk.md 页面, 内容如下, 注意修改标注的内容, front-matter 的内容自行修改\n--- title: \u0026#34;💬 说说\u0026#34; date: 2021-08-31 hidemeta: true description: \u0026#34;胡言乱语\u0026#34; comments: true reward: false showToc: false TocOpen: false showbreadcrumbs: false --- \u0026lt;body\u0026gt; \u0026lt;!-- 引用 artitalk --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/artitalk\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 存放说说的容器 --\u0026gt; \u0026lt;div id=\u0026#34;artitalk_main\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Artitalk({ appId: \u0026#39;**********\u0026#39;, // Your LeanCloud appId appKey: \u0026#39;************\u0026#39;, // Your LeanCloud appKey serverURL: \u0026#39;*********\u0026#39; // 绑定的自定义域名 }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 这个时候已经可以直接访问了, https://your.domain.com/talk\n输入 leancloud 配置步骤中的第 4 步配置的用户名密码登录后就可以发布说说了\n5 自定义 footer 自定义页脚内容\n添加完下面的页脚内容后要修改 assets\\css\\extended\\blank.css 中的 --footer-height 的大小, 具体数字需要考虑到行数和字体大小\n5.1 自定义徽标 徽标功能源自：https://shields.io/ 考虑到访问速度, 可以在生成完徽标后放到自己的 cdn 上\n在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n\u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://img.shields.io/static/v1?\u0026amp;style=plastic\u0026amp;color=308fb5\u0026amp;label=Power by\u0026amp;message=hugo\u0026amp;logo=hugo\u0026#34; style=\u0026#34;display: unset;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; 5.2 网站运行时间 在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n起始时间自行修改\n\u0026lt;span id=\u0026#34;runtime_span\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;function show_runtime(){window.setTimeout(\u0026#34;show_runtime()\u0026#34;, 1000);X=new Date(\u0026#34;7/13/2021 1:00:00\u0026#34;);Y=new Date();T=(Y.getTime()-X.getTime());M=24*60*60*1000;a=T/M;A=Math.floor(a);b=(a-A)*24;B=Math.floor(b);c=(b-B)*60;C=Math.floor((b-B)*60);D=Math.floor((c-C)*60);runtime_span.innerHTML=\u0026#34;网站已运行\u0026#34;+A+\u0026#34;天\u0026#34;+B+\u0026#34;小时\u0026#34;+C+\u0026#34;分\u0026#34;+D+\u0026#34;秒\u0026#34;}show_runtime();\u0026lt;/script\u0026gt; 5.3 访问人数统计 统计功能源自：http://busuanzi.ibruce.info/\n在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\u0026#34;\u0026gt; 总访客数: \u0026lt;i class=\u0026#34;fa fa-user\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; | 总访问量: \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; | 本页访问量: \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; 6 自定义字体 可以使用一些在线的字体, 可能会比较慢, 推荐下载想要的字体放到自己的服务器或者 cdn 上\n修改 assets\\css\\extended\\fonts.css, 添加 @font-face\n@font-face { font-family: \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; src: url(\u0026#34;https://your.domain.com/fonts/test.woff2\u0026#34;) format(\u0026#34;woff2\u0026#34;); font-display: swap; } 修改 assets\\css\\extended\\blank.css, 推荐将英文字体放在前面, 可以实现英文和中文使用不同字体\n.post-content { font-family: Consolas, \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; //修改 } body { font-family: Consolas, \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; //修改 } 7 修改链接颜色 在 hugo+papermod 默认配置下, 链接颜色是黑色字体带下划线的组合, 个人非常喜欢 typora-vue 的渲染风格 hugo官方文档 给出了通过 render hooks 覆盖默认的 markdown 渲染 link 的方式\n新建 layouts/_default/_markup/render-link.html 文件, 内容如下在官方给出的示例中添加了 style=\u0026quot;color:#42b983, 颜色可以自行修改\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;{{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; style=\u0026#34;color:#42b983\u0026#34;;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; 8 shortcode ppt、bilibili、youtube、豆瓣阅读和电影卡片\nmermaid\n图片画廊\n9 其他修改 其他 css 样式修改基本都是通过 f12 控制台一点点摸索改的, 不太规范且比较琐碎就不单独记录了, 其实我根本已经忘记还改了哪些东西\n以上\n","permalink":"http://localhost:1313/en/posts/blog/hello-hugo/","summary":"0 前言 本文内容比较杂乱, 无法保证实时更新, 如果遇到问题, 可以在 github 查看最新的配置: hugo 相关配置 docker 相关配置 研究 hugo 建站之初是打算采用 Github Pages 来发布静态博客 优点 仅需一个 github 账号和简单配置即可将静态博客发布到 github pages 没有维护的时间成本, 可以将精力更多的放到博客内容本身上去 无需备案 无需 ssl 证书 缺点 访问速度","title":"【置顶】Hello, hugo!"},{"content":"1 C++17 Language Features 1.1 Template argument deduction for class templates 类模板的模板参数推断 Automatic template argument deduction much like how it\u0026rsquo;s done for functions, but now including class constructors.\n类似于函数的自动模板参数推导，但现在也包括类构造函数。\ntemplate \u0026lt;typename T = float\u0026gt; struct MyContainer { T val; MyContainer() : val{} {} MyContainer(T val) : val{val} {} // ... }; MyContainer c1 {1}; // OK MyContainer\u0026lt;int\u0026gt; MyContainer c2; // OK MyContainer\u0026lt;float\u0026gt; 参考 https://github.com/AnthonyCalandra/modern-cpp-features?tab=readme-ov-file#template-argument-deduction-for-class-templates\n","permalink":"http://localhost:1313/en/posts/tech/c++/c++17%E6%96%B0%E7%89%B9%E6%80%A7/","summary":"1 C++17 Language Features 1.1 Template argument deduction for class templates 类模板的模板参数推断 Automatic template argument deduction much like how it\u0026rsquo;s done for functions, but now including class constructors. 类似于函数的自动模板参数推导，但现在也包括类构造函数。 template \u0026lt;typename T = float\u0026gt; struct MyContainer { T val; MyContainer() : val{} {} MyContainer(T val) : val{val} {} // ... }; MyContainer c1 {1}; // OK MyContainer\u0026lt;int\u0026gt; MyContainer c2; // OK MyContainer\u0026lt;float\u0026gt; 参考 https://github.com/AnthonyCalandra/modern-cpp-features?tab=readme-ov-file#template-argument-deduction-for-class-templates","title":"C++17新特性"},{"content":"Narrow Phase GJK Support Functions 支撑函数，返回形状A在向量d上的最大投影点，这个点被称为支撑点（Support Point），此操作被称为支撑映射（Support Mapping）。在多边形上寻找支撑点相对容易，遍历多边形顶点找到与d具有最大点积的顶点。\nSimplexes GJK在每次迭代中，构建一些列更接近原点的简单形来实现。\nMinkowski Diffenrence 如果闵可夫斯基差所表示的空间包含原点，则两个几何体相交。如果不包含原点，则两个几何体之间的距离是闵可夫斯基差所表示的空间到原点的最小距离。\nGJK Algorithm EPA Algorithm GJK只能计算出两个几何体不相交时的之间的距离。两个几何体相交时需要EPA（Expanding Polytope Algorithm），通过不断细分GJK生成的包含原点的Simplex，来找到最小平移量（Minmum Translation Vector, MTV）。闵可夫斯基差所表示的空间到原点最近的距离就是两个几何体的穿透深度。\n参考 GJK：http://www.dtecta.com/papers/jgt98convex.pdf GJK：http://www.dtecta.com/papers/gdc2001depth.pdf\n","permalink":"http://localhost:1313/en/posts/tech/graphics/%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/","summary":"Narrow Phase GJK Support Functions 支撑函数，返回形状A在向量d上的最大投影点，这个点被称为支撑点（Support Point），此操作被称为支撑映射（Support Mapping）。在多边形上寻找支撑点相对容易，遍历多边形顶点找到与d具有最大点积的顶点。 Simplexes GJK在每次迭代中，构建一些列更接近原点的简单形来","title":"物理引擎"},{"content":"1 整个过程 预编译：主要处理源代码文件中的以“#”开头的预编译指令。 编译：把预编译之后生成的xxx.i或xxx.ii文件，进行一系列词法分析、语法分析、语义分析及优化后，生成相应的汇编代码文件。 汇编：将汇编代码转变成机器可以执行的指令(机器码文件)。 链接：目标文件再与库进行链接得到可执行文件.out。 2 链接 本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。库有两种：静态库（.a、.lib）和动态库（.so、.dll）。 windows上对应的是.lib .dll， linux上对应的是.a .so。\n静态库在链接阶段，会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。静态库对函数库的链接是放在编译时期完成的。程序在运行时与函数库再无瓜葛，移植方便。浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件。\n动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，规避了空间浪费问题。动态库的一个缺点是需要记录函数的引用，在程序运行时查询库来调用函数，需要时间，典型的时间换空间。\n","permalink":"http://localhost:1313/en/posts/tech/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/","summary":"1 整个过程 预编译：主要处理源代码文件中的以“#”开头的预编译指令。 编译：把预编译之后生成的xxx.i或xxx.ii文件，进行一系列词法分析、语法分析、语义分析及优化后，生成相应的汇编代码文件。 汇编：将汇编代码转变成机器可以执行的指令(机器码文件)。 链接：目标文件再与库进行链接得到","title":"程序是如何运行的"},{"content":"1 多态定义 在基类的函数前加上virtual关键字，在派生类中重写该函数，运行时将会根据对象的实际类型来调用相应的函数。如果对象类型是派生类，就调用派生类的函数；如果对象类型是基类，就调用基类的函数。\n2 虚函数表和虚函数指针 每一个有虚函数的类（或有虚函数的类的派生类）都有一个虚函数表，该类的任何对象中都放着虚函数表的指针。虚函数表中列出了该类的虚函数地址。\nclass Base { public: virtual void func() { cout \u0026lt;\u0026lt; \u0026#34;Base::func() called\u0026#34; \u0026lt;\u0026lt; endl; } }; class Derived : public Base { public: void func() override { cout \u0026lt;\u0026lt; \u0026#34;Derived::func() called\u0026#34; \u0026lt;\u0026lt; endl; } }; 对于Base类，编译器会生成一个虚函数表，包含指向Base::func的指针。对于Derived类，编译器也会生成一个虚函数表，但这个表中func函数的条目会指向Derived::func。当创建Derived类的对象并通过Base类的指针或引用调用func时，程序会运行Derived::func，因为Derived对象中的虚函数指针指向Derived的虚函数表，而这个表中func的条目指向Derived::func。\n3 构造函数和析构函数 构造函数一定不是虚函数： 当定义一个对象的时候，首先会分配对象内存空间，然后调用构造函数来初始化对象。vptr变量是在构造函数中进行初始化的。又因为执行虚函数需要通过vptr指针来调用。\n析构函数一定是虚函数：通过基类的指针删除派生类对象时，通常情况下只调用基类的析构函数，这就会存在派生类对象的析构函数没有调用到，存在资源泄露的情况。解决办法是把基类的析构函数声明为virtual。\n4 参考 https://lzpgithub.github.io/2015/07/24/xufuncneicun/#section-4\n","permalink":"http://localhost:1313/en/posts/tech/c++/c++%E5%A4%9A%E6%80%81/","summary":"1 多态定义 在基类的函数前加上virtual关键字，在派生类中重写该函数，运行时将会根据对象的实际类型来调用相应的函数。如果对象类型是派生类，就调用派生类的函数；如果对象类型是基类，就调用基类的函数。 2 虚函数表和虚函数指针 每一个有虚函数的类（或有虚函数的类的派生类）都有一个虚函数表","title":"C++多态"},{"content":"1 整体结构 代码区：包括代码段和只读数据段，用于存储程序的可执行指令和只读的常量数据。 常量区：const修饰的变量，运行时不可改变。 全局/静态区：程序启动时分配，程序结束时释放。全局变量区的数据可以被整个程序访问，静态变量区的数据仅声明的作用域内可见。 栈区：由编译器自动分配与释放，存放运行时函数分配的局部变量、函数参数、返回数据、返回地址等。其操作类似于数据结构中的栈。 堆区：由程序员分配，如果程序员没有释放，程序结束时可能有OS回收。其分配类似于链表。 ","permalink":"http://localhost:1313/en/posts/tech/c++/c++%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/","summary":"1 整体结构 代码区：包括代码段和只读数据段，用于存储程序的可执行指令和只读的常量数据。 常量区：const修饰的变量，运行时不可改变。 全局/静态区：程序启动时分配，程序结束时释放。全局变量区的数据可以被整个程序访问，静态变量区的数据仅声明的作用域内可见。 栈区：由编译器自动分配与释放，","title":"C++内存结构"},{"content":" 在 20 岁到 30 岁这十年的过程中, 我们都走过一样的路. 你觉得孤独就对了, 那是让你认识自己的机会. 你觉得不被理解就对了, 那是让你认清朋友的机会. 你觉得黑暗就对了, 那样你才分辨得出什么是你的光芒. 你觉得无助就对了, 那样你才能明白谁是你成长中能扶你一把的人. 你觉得迷茫就对了, 谁的青春不迷茫.\n这个假期见了很多同学和老友, 喝了很多酒. 以前我也想, 等到毕业一年, 三年, 五年再见, 但其实过程中很多人就断了联系. 所由现在能见到的朋友都是见一次少一次, 你甚至不知道下一次再见的时间, 所有少年相约的承诺都只是当下的安慰. 你总有一天会明白: 有些人, 有些事, 一时错过, 就是一世.\n我们心里永远有一个人, 不是他, 也会有别人. 刚开始我们都会折磨自己, 埋怨自己, 恨自己为什么一直放不下这个人. 后来才知道, 不是你放不下谁, 而是你放不下想念对方的那个自己.\n很多事情, 只要能做到心甘情愿, 一切都理所当然.\n每堂课 45 分钟, 如果放到现在, 每一分每一秒我都尽力记住老师说的每句话, 隔壁周围的每张脸吧.\n看上了就追, 相中了就买, 绝不再做后悔的事情. 现在有人问我, 为什么你总是那么激动, 那么草率地做决定? 看到这篇日志, 我才想起来, 原来早在那么多年前我就说服自己要改变. 宁肯做一个草率地决定, 也不要一直后悔地回忆.\n喜欢一个事物光有自己的勇气是不行的, 一定要让别人觉得你喜欢的东西是世界上最好的, 而且要大声地说, 大胆地说, 理直气壮地说.\n无论再矫情再幼稚再做作, 那都是一个真真实实的我们, 没有什么好鄙视, 更不用一个激动就按了删除键. 要知道你删除的并不是幼稚, 而是一段青春好看的风景, 这些风景或许你现在随处可见, 但这些风景未来你世界难寻.\n感情不能假手于人, 中间一旦掺杂了等价交换物, 也许最后记得的只是等价物了.\n任何事情, 不要将希望寄托到别人身上, 无论是情感还是工作, 否则唯一的结果便是措手不及, 安全感只能自己给自己.\n你错过的, 别人才会得到, 正如你得到的都是别人错过的.\n成长中所有遇到的问题, 都是量身定做的. 解决了, 你就成为这类人中的幸存者. 不解决, 你永远不知道自己可能成为谁.\n因为年轻, 所以没有选择, 只能试试.\n不如我们定下一个誓约, 看看十年之后, 我们彼此又在哪里, 听谁的歌, 看谁的字, 身边的人又是谁?\n好多好多美好的事情, 就应该遇见, 而不是追逐, 或者等待.\n我们之所以迷茫, 并不是因为我们不知道自己想要什么. 而是因为, 无数人教育我们应该要怎么样, 却忘了告诉我们, 想要更重要. 所以我们在应该和想之间徘徊, 就是迷茫. 其实, 做自己就好.\n所谓成长, 不是学会, 就是懂得.\n我妈说: 没有人会一直正确, 他们只会越来越正确.\n这辈子我们需要一见钟情很多人, 两情相悦一些人, 然后白头偕老一个人.\n梦里所有的一切都顺理成章, 而清醒之后漏洞百出.\n成长有一瞬间给我的感觉就是, 并不是学会了避开危险, 而是学会了不怕疼痛.\n不如我们立个约定, 见证彼此的下一年. 希望在未来的日子里, 我们不为了生活而忘了梦想, 不为了老练而丢弃冲动, 不为了成熟而失去格调.\n","permalink":"http://localhost:1313/en/posts/read/shei-de-qing-chun-bu-mi-mang/","summary":"在 20 岁到 30 岁这十年的过程中, 我们都走过一样的路. 你觉得孤独就对了, 那是让你认识自己的机会. 你觉得不被理解就对了, 那是让你认清朋友的机会. 你觉得黑暗就对了, 那样你才分辨得出什么是你的光芒. 你觉得无助就对了, 那样你才能明白谁是你成长中能扶你一把的人. 你觉得迷茫就对了, 谁的青春不迷茫.","title":"《谁的青春不迷茫》"},{"content":"0 前言 感谢 piclist 作者的 不吝解答\n最近从 typora 迁移到了 obsidian, typora 可以很方便的自动调用 picgo 实现图片上传, obsidian 得益于丰富的插件市场, 可以通过 Image Auto Upload Plugin 插件调用 picgo, 但是必须手动启动 picgo 后才能正常使用\n在插件配置的注释中发现了 piclist, 经了解发现这个二开版本支持 docker 部署, 综合考虑了一下还是值得折腾一下的, 既能避免手动打开 picgo 的繁琐, 也可以在我所有的 pc 上卸载掉一个软件, 同时还能水一文\n注意本文以已有服务器/ip/域名且 web 服务使用 nginx 为前提, 如果不满足上述前提, 需要将 piclist 的 36677 端口映射到主机, 部署完 piclist 后直接通过 ip 加端口的形式调用即可\n1 部署 1.1 piclist 配置 docker-compose.yml 中添加如下配置\nversion: \u0026#39;3.1\u0026#39; services: piclist: image: \u0026#39;kuingsmile/piclist:v1.7.0\u0026#39; container_name: piclist restart: always networks: blog_net: ipv4_address: 172.19.0.5 volumes: - \u0026#39;$PWD/data/piclist:/root/.piclist\u0026#39; # 需要设置 piclist_key 环境变量 command: node /usr/local/bin/picgo-server -k ${piclist_key} networks: blog_net: driver: bridge ipam: config: - subnet: 172.19.0.0/16 添加环境变量并启动 piclist 容器, 此环境变量用于 client(obsidian) 和 piclist server 之间的鉴权\n# 将 123456 设置为自定义的密码 cat \u0026gt;\u0026gt; ${HOME}/.bash_profile \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; export piclist_key=\u0026#39;123456\u0026#39; EOF source ${HOME}/.bash_profile docker-compose up -d 修改 data/piclist/config.json 的配置, 以阿里云 OSS 为例添加图床配置, 内容自行修改, 官方没有配置文件的详细文档, 可以折中一下, 先 windows 安装 piclist, 测试无误后导出配置\n{ \u0026#34;picBed\u0026#34;: { \u0026#34;current\u0026#34;: \u0026#34;aliyun\u0026#34;, \u0026#34;uploader\u0026#34;: \u0026#34;aliyun\u0026#34;, \u0026#34;aliyun\u0026#34;: { \u0026#34;accessKeyId\u0026#34;: \u0026#34;******\u0026#34;, \u0026#34;accessKeySecret\u0026#34;: \u0026#34;******\u0026#34;, \u0026#34;bucket\u0026#34;: \u0026#34;lvbibir-image\u0026#34;, \u0026#34;area\u0026#34;: \u0026#34;oss-cn-beijing\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;blog/\u0026#34;, \u0026#34;customUrl\u0026#34;: \u0026#34;https://image.lvbibir.cn\u0026#34;, \u0026#34;options\u0026#34;: \u0026#34;\u0026#34; } }, \u0026#34;picgoPlugins\u0026#34;: {} } 最后再重启一下 piclist\ndocker restart piclist 1.2 nginx 配置 nginx 中添加如下 location 配置\nlocation /piclist/ { proxy_pass http://172.19.0.5:36677/; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-Port $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $host; proxy_set_header X-NginX-Proxy true; proxy_set_header Accept-Encoding \u0026#34;br\u0026#34;; } 执行 docker restart nginx-proxy 重启 nginx\n最后修改 obsidian 的 Image auto upload Plugin 插件的配置\n打开远程服务器模式 将接口 url 设置为 https://\u0026lt;你的域名\u0026gt;/piclist/upload?key=\u0026lt;你的key\u0026gt;, 这里的 key 就是启动容器时配置的环境变量的值, 需注意如果 key 中有特殊字符需要 url 转义一下 最后测试一下图片上传即可, 如果有报错可以通过 docker logs -f piclist 查看日志\n2 常见问题 2.1 上传失败 obsdian 直接提示上传失败, 可能是 key 中有特殊字符没有转义或者没有打开远程服务器模式 日志中有如下 Unauthorized access 报错, 一般是 key 不匹配 2.2 忘记 piclist_key 如果已经启动了的容器可以通过如下命令查看\ndocker exec -it piclist ps -ef | grep -v grep | grep node 以上\n","permalink":"http://localhost:1313/en/posts/blog/docker-deploy-piclist/","summary":"0 前言 感谢 piclist 作者的 不吝解答 最近从 typora 迁移到了 obsidian, typora 可以很方便的自动调用 picgo 实现图片上传, obsidian 得益于丰富的插件市场, 可以通过 Image Auto Upload Plugin 插件调用 picgo, 但是必须手动启动 picgo 后才能正常使用 在插件配置的注释中发现了 piclist, 经了解发现这个二开版本支持 docker 部署, 综合考虑了一下还是值得折腾一下的, 既能避免手动打开 picgo 的繁","title":"docker 部署 piclist"},{"content":"0 前言 挂刀是指从饰品交易平台购买游戏饰品，在 steam 市场出售以实现将人民币转换为 steam 阿根廷账号余额。\nsteam 圣诞促销活动快结束了，买了几款游戏后发现阿根廷账号余额没多少了，挂刀过程又比较繁琐，故有此文记录一下挂刀搞余额的步骤。\n1 步骤 1.1 网易 buff 账号注册及绑定 buff 账号使用手机号注册即可，绑定需要搞余额的 steam 账号，同时需要提供 steam 账号的 API key 和 交易链接，这部分 buff 有教程，或者百度，很容易找到\n1.2 挂刀油猴脚本 脚本链接\n脚本安装成功进入 网页版buff 后，简单设置一下脚本，推荐设置了一下货币转换为阿根廷比索和默认排序规则\n1.3 脚本提供的信息 每个饰品需要关注的有如下信息：\n挂刀比例 越低代表售出后可获得的余额更多 左边是 buff 售价，右边是市场售价（阿根廷比索）\nsteam 求购人数\n1.4 寻找合适饰品 以以下几个维度入手，选择合适的饰品：\n比例较低 求购人数多 价格合适，太高可能卖的慢，太低要达到自己的要求可能需要倒好几个甚至十几个饰品才够 选择好后直接购买即可，后续步骤按照 buff 教程来\n1.5 卖出饰品 脚本提供的收益只能参考，具体还是要在市场看，着急就按照最低价卖即可，别人购买后就可以愉快的买新游戏啦\n以上\n","permalink":"http://localhost:1313/en/posts/life/steam-guadao/","summary":"0 前言 挂刀是指从饰品交易平台购买游戏饰品，在 steam 市场出售以实现将人民币转换为 steam 阿根廷账号余额。 steam 圣诞促销活动快结束了，买了几款游戏后发现阿根廷账号余额没多少了，挂刀过程又比较繁琐，故有此文记录一下挂刀搞余额的步骤。 1 步骤 1.1 网易 buff 账号注册及绑定 buff 账号使用手机号注册即可，绑定需要搞余额","title":"steam挂刀教程"},{"content":"0 前言 书名《微习惯》，作者斯提芬·盖斯 [美]，江西人民出版社，译者桂君\n微习惯是一种非常微小的积极行为，你需要每天强迫自己完成它。微习惯太小，小到不可能失败。正是因为这个特性，它不会给你造成任何负担，而且具有超强的“欺骗性”，它因此成了极具优势的习惯养成策略。\n微习惯策略的科学原理表明了人们无法长期坚持大多数主流成长策略的原因，也解释了人们长期坚持微习惯策略的可能性。人们无法让改变的效果持久时，往往认为原因在于自己，但其实有问题的并不是他们本身，而是他们采用的策略。当你开始用微习惯策略教你的方法按照大脑的规律做事情时，持久改变其实很容易。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n1 微习惯是什么 千里之行，始于足下。 ——老子\n欢迎来到微习惯的世界，首先陈述两个事实：\n哪怕是一点点行动，也比毫不作为强无数倍（在数学意义上如此，实际生活中也是如此）。 相比某一天做很多事，每天做一点事的影响力会更大。 几乎每个人都经历过瓶颈期，竭尽全力想提升自己却最终失败，然后无数次尝试并遭遇失败后很久不敢重新开始。\n很多时候，我们没能实施行动，也没能实现计划，但有没有可能这并不是我们的错，而是我们采用并认可的策略出了问题呢？\n只为培养好习惯\n微习惯不会直接帮你戒烟、戒酒或者控制赌瘾，微习惯策略只会帮你培养你认可的好习惯，给你的生活增添积极行为，持续丰富你的生活。消除坏习惯和建立好习惯有着共同的目标——用更好的行为方式取代原有的行为方式。\n如果你有好习惯，你改变自己的主要动力是靠近这些积极的东西；如果你有坏习惯，你改变自己的主要动力是远离这些消极的东西。\n微习惯简介\n如果你想培养一个新习惯，微习惯基本就是它经过大幅缩减的版本——把“每天做 100 个俯卧撑”缩减成每天 1 个，把“每天写 3000 字”缩减成每天写 50 字，把“始终保持积极思考”缩减成每天想两件好事。\n微习惯体系的基础在于“微步骤”，那些“小到不可思议的一小步”。\n一家银行可能因为规模太大而不至于失败，而微习惯是因为太小而不至于无法完成，因为，你不会有机会体验未完成目标导致的常见消极情绪，比如愧疚和挫败感。\n习惯还与压力有关\n现在试想一下：如果坏习惯让你压力过大，你会怎么做。压力是负反馈循环的绝佳导火索，它会触发一个坏习惯，坏习惯又会触发内疚感、内心的焦虑和更多压力，这些消极因素会再次触发这个坏习惯。\n但是，如果习惯本身就能缓解压力会怎样？拿锻炼来说，你的压力会把你拽到健身房，锻炼会帮你缓解焦虑。\n养成新习惯需要多长时间\n不是 21 天，也不是 30 天。“21 天”谬论可能源自整形外科医生麦克斯韦尔·马尔茨（Maxwell Maltz）。据说马尔茨医生发现接受截肢手术的患者需要大约 21 天来适应肢体残缺的事实，因此，他认为 21 天是人们适应任何生活变化所需要的时间长度。\n不同行为所需要的时间差别很大，从 18 天到 254 天不等，甚至在某些案例中，这些时间可能惊人的长。\n2 大脑的工作原理 大脑是我的一切，华生。身体只是附件而已。 ——阿瑟·柯南·道尔，《福尔摩斯探案集》\n大脑是变化缓慢且状态稳定的\n人类大脑有一套对外部世界做出反应的固定体系。有时我们觉得不易改变的大脑令人感到沮丧，但总体来说，好处还是相当多的\n一旦成功养成健康的新习惯，一切都会变得轻松起来。我们无需跟大脑持久战斗就可以自然的执行这些习惯。\n大脑中的两个核心角色\n愚蠢的重复者——基底神经节 聪明的管理者——前额皮层 基底神经节是愚蠢的，你抽烟的时候，它不会考虑到肺癌的可能性；你锻炼的时候，它也不会幻想健康身体的好处。但是它可以高效率地重复模式，节省精力，它的工作几乎无需我们消耗额外的意志力或者动力即可完成。\n前额皮层则相当聪明，是个可以理解长远利益和结果的管理者，它拥有抑制基底神经节的能力，同时它还负责处理短期思维和决策。\n前额皮层的功能这么强大，所以会消耗相当的精力，从而使你感到疲劳。这个时候，掌管重复部分的基底神经节就会接管大脑。\n让大脑的其他部分喜欢上前额皮层想要的东西，是建立新习惯的唯一方式\n3 动力 v.s. 意志力 情绪要么顺服你，要么支配你，这要看谁说了算。 ——吉米·罗恩\n当动力处于峰值时，意志力消耗量为 0 或可以忽略不计，这是因为你无需强迫自己做你本来就愿意做的事情，可以当动力降为 0 时，强烈的内心抵触意味着我们必须消耗非常大的意志力\n做事缺乏动力，意志力的消耗猛涨，这种方式很难维持一个行为并将其培养成习惯\n“激发动力”策略的诸多问题\n激发动力有效果吗？答案并不是那么确定。偶尔我们可以激发强烈的动力做某件事，比如锻炼身体，比如阅读，比如学习某项技能，但是扪心自问我们无法确保下次是否还有如此强烈的动力。\n动力是一种能带来诸多好处的重要感觉，但是当它出现时，请把它看作一个额外的奖励，一件美好的事物。我们可以享受它带来的好处，但不要尝试去依赖动力。\n动力并不可靠 动力之所以不可靠，是因为它是以人的感受为基础的，而人类的感受容易改变且无法预测已经是几百年来公认的事实了。几乎所有东西都能改变你的感受，所以我们不要把希望放在如此不稳定的东西上。任何事物能成为基础的第一原则就是它必须牢固可靠。\n我们无法做到每次都愿意激发动力 问题在于，动力是很难或者说几乎不可能按需培养的。我们只有在精力充沛、思维模式健康、没有受到其他强烈诱惑的时候，我们才能依靠动力成功。\n你根本不想让自己想让自己想锻炼。很多时候，你积聚动力只是为了让自己有动力激发动力而已。生活中总有那么几次，你不愿意为了激发动力而激发动力。\n“热情递减法则” “热情递减法则”不是一条真正的法则，是作者创造的术语。它比对应的“边际效用递减法则”更好理解。这条经济法则认为，吃第五块披萨的时候愉悦感略低于吃第四块的时候，吃第四块的时候又略低于吃第三块的时候。可能下面这个例子更形象，一瓶三块钱的冰可乐第一口至少值两块五。甚至我觉得感情生活中的新鲜感同样适用这个法则，新鲜感就是一种动力，然而大部分情侣新鲜感也只能维持几个月而已。\n习惯是一个我们选择做一件事而做一件事的行为，行动开始前和结束后不会出现剧烈波动。有热情是好事，但我们应该把这种动力看作一种额外奖励，而不是实施行动的信号。即表现更稳定和自动的基底神经节掌握控制权。\n为什么意志力能打败动力？\n有必要重申一遍，动力是好东西，只是不可靠而已。借助意志力，动力会变得更加可靠；而且如果先采取行动，继续行动的动力会被迅速激发。\n意志力很可靠 意志力可以被强化 意志力可以通过计划执行 意志力的工作原理\n做决定也会消耗意志力 在同一天里做过艰难决定的人在后来面对诱惑时屈服的可能性更高，这体现了自控力的下降。重大决定和意志力似乎需要消耗同样的能量。比如你上午强迫自己学习了几个小时，在吃晚饭时在炸鸡和更为健康的饮食之间会非常偏向前者，前提是学习和控制饮食你都没有养成习惯的前提下。\n意志力损耗的五个最重要的因素 元分析是从指定主题的相关文献中提取出重要结论的过程。\n2010 年的一项针对自我损耗的元分析中发现了引起自我损耗的五个最重要的因素：努力程度、感知难度、消极情绪、主观疲劳和血糖水平。\n总结一下上述的本章内容\n我们是用动力或者意志力开启新的行为的（非习惯性）。 动力不可靠，所以不能充当建立习惯的策略。 意志力可靠，但前提是你没有把它耗尽。 引发意志力损耗的五大重要因素：努力程度、感知难度、消极情绪、主观疲劳和血糖水平。 如果我们能克服这五项障碍，我们就应该能走向成功。 4 微习惯策略 塑造你生活的不是你偶尔做的一两件事，而是你一贯坚持做的事。 ——安东尼·罗宾\n以微习惯方式运用意志力\n微习惯是怎样有效消除意志力的五大威胁的\n努力程度 微习惯需要非常少的实际努力，自我损耗极少。\n感知难度 微习惯的本质决定它几乎不会让你在还没做的时候就感受到困难。一旦你开始做且能随心所欲地继续下去，“已经开始”带来的心理影响会让感知难度明显降低。正如从物理学角度来看，物体的惯性在运动开始时最大，一旦物体处于运动状态，因为存在动量，一切都会变得简单。\n很多时候我们无法坚持做某件事的时候都是因为在一开始就感受到了很大的难度，所以有了这样的想法：如果最终做不到，我们宁可不开始。\n消极情绪 即使微习惯占用了一件本应使你快乐的事情的时间，你要做的努力也非常少，所以几乎感受到消极情绪。何况通常情况下，我们都会用有益的行为取代浪费时间的行为，这个过程本身就会带来积极情绪。\n主观疲劳 这个因素很有意思，不是“疲劳”，而是“主观疲劳”，就是说我们在评估自己的疲劳程度时并不是完全客观的。通常更难的任务在开始前就会感受到很大的压迫感。\n采用微习惯策略的结果：主管疲劳无法彻底消除，但是微习惯可以有效缓解主观疲劳。\n血糖水平 葡萄糖是人体首要的能量来源。如果血液中葡萄糖的含量变低，你会感觉疲惫。\n采用微习惯策略，你无需动用前额皮层去做一些重大决定，或者消耗很多意志力，这有助于保持我们的血糖水平。\n微习惯如何拓宽你的舒适区\n你现在有一个心理舒适区（comfort zone），把它想象成一个圆圈。圆圈内是当下的我们，圆圈外则是我们想要达到的目标，也许是身材变好，读完了几本书，学会了某项技能。但是这些目标都要经历一些不太舒适的过程才能实现（因为脱离了基底神经节目前的模式）。\n通常我们采取“只要能成功怎么做都行”，然后开始大量行动，我们全力冲刺到舒适区外边，拼命挣扎想要留在那里，此时我们的潜意识：“有意思，但是这么剧烈的变化让我很不舒服”，当我们的动力和意志力不足以支撑时，我们会被拽回到舒适圈内。\n而微习惯就像是走到圆圈的边缘，轻轻往外走一小步，我们完全可以走一小步后退回到舒适圈，潜意识不会对这么微小的改变的做出太大反应，但是长此以往，舒适圈就会被我们扩大。\n我们偶尔会超额完成目标，可以用基础物理学知识来解释。牛顿第一运动定律的内容包括：\n除非受到外力作用，否则静止的物体总保持静止状态 除非受到外力作用。否则出于运动状态中的物体的速度不会改变。 我们可以得到一个新等式：一小步 + 想做的事 = 较高的进一步行动的可能性\n5 微习惯的独特之处 是故胜兵先胜而后求战，败兵先战而后求胜。 ——孙子，《孙子兵法》\n微习惯能与现有习惯一较高下\n培养一个新习惯也是对之前我们养成的一些习惯的挑战，我们需要摒弃一些曾经不好的习惯，以让更好的行为代替它。大脑会抗拒大幅度的改变，所以我们要以极其微小的行为做出一点点改变，潜移默化的影响我们的大脑，让新的行为成为基底神经节的一种模式。\n微习惯没有截止时间\n很多将心理学、行为学或者其他尝试帮助你养成好习惯的书籍都是基于“习惯是 21 天或者 30 天养成的”这个理论，而微习惯没有明确的截止时间，它要求尽可能一天都不能落下，长久地坚持。但是不像其他方法要求你每天健身一小时或者读一个小时的书，我们要做的只是很小很小的一部分，例如读 2 页书就好，只是这样。\n微习惯可以提升自我效能感\n大多数人都成尝试过把一个良好的行为养成习惯，然后由于各种各样的原因没有坚持下来，这会使我们缺乏基本的自我效能感。\n微习惯正是重新开始的完美方法。你不会再被巨大的目标打垮，也不会因为目标未实现带来的内疚感感到焦虑煎熬。这一次，你每天都能成功。这些胜利也许微不足道，但是对于一颗心灰意冷的心来说是至关重要的。\n微习惯帮你培养正念和意志力\n正念是一个非常重要的技能，它指的是我们对于自己的思维和行动有清醒的认知。正念是目标清晰地活着和敷衍活着之间的区别。如果你的微习惯是每天起床后喝一杯水，那么你就会对自己总共喝了多少水有所认知，如果是每天看两页书，那么你就会时常想自己已经看完了多少书。\n前文提过意志力是一项非常宝贵的资源，而微习惯是一项频繁重复小任务的行为，这是锻炼意志力的一个绝佳方法。\n6 彻底改变只需要八步 一个得不到执行的念头只会消亡 ——罗杰·冯·欧克\n第一步：选择适合自己的微习惯和计划\n选择适合自己的微习惯\n可以是一个每天都要做的事情，也可以是一个时间段的弹性计划，比如一周跑步三次\n把习惯变成一个小到不可思议的一步\n比如把每天做 20 个俯卧撑改成 1 个\n第二步：挖掘每个微习惯的内在价值\n我们很多时候无法养成习惯的原因在于我们想做一件事，但为要不要做这件事而苦恼。可以反思一下我们在第一步制定的习惯，一般都是我们长期以来潜意识里觉得正确的事情，却一直缺乏动力或者不那么理解这项行为能给我们带来什么。\n用“为什么钻头”来挖掘一下：\n我想每天读两页书。为什么？ 因为读书几乎一直以来都是成功人士的标配。为什么？ 因为读书是人们汲取知识、拓宽视野极好的途径。为什么？ 因为读书可以练就腹有诗书气自华和沉稳的气质，而这两点正是目前的我极其渴求的。 第三步：明确习惯依据，将其纳入日程\n培养习惯的常见依据有两个：时间和行为方式。对于朝九晚五时间比较规律的人群，更推荐根据时间方式作为依据，日程比较灵活的可以使用行为方式作为依据。\n时间：每周一三五的下午 3 点锻炼 行为方式：吃完晚饭后半个小时开始读书 也有第三种自由度更高的方式，我们在当天任意时间完成都可以，最低限度是睡觉前。\n第四步：建立回报机制，以奖励提升成就感\n一个有趣的现象：一个申请假释的犯人，假释听证会的最佳时间是在假释官吃完东西、结束休息之后，因为研究发现假释官在吃饱睡好之后做出的判决对被告更有利（大概是因为他们更愿意倾听）。\n拿锻炼来举例，锻炼可以让你获得健康的体魄，良好的身材。但是你刚开始锻炼的时候，锻炼结束后回到家里你收获到的回报是什么？汗水？于此同时，你的大脑却现在就想吃炸鸡，因为糖会刺激味蕾并激活大脑的回报中心，所以炸鸡是一种感官（首要）回报，而锻炼带来的是抽象（次要）回报，比如拥有好身材在沙滩上漫步、对付出的努力感到满意。次级回报需要更长的时间才能在大脑站稳脚跟。\n在一开始锻炼产生的内啡肽和期望产生的回报差距过大时，我们可以给自己一些奖励策略，比如挑选一个想买的东西加入购物车，在跑步一个月后把它买下来、如果能坚持到两个月就给自己买一块专业的运动手表（比如我给自己买的高驰 pace2）。\n这像是教小孩骑自行车，一开始我们需要向孩子保证会扶着自行车，可是在某个时候我们把手松开后，孩子不需要扶持也能继续骑车了\n第五步：记录与追踪情况\n遗忘是人类的天性。在一项习惯的前期阶段，遗忘也是一个阻力，我们偶尔会忘记我们给自己制定的计划。所以采取一些策略来提醒我们还是很有必要的。\n方式不重要，重要的是可以有效地提醒我们。如果你有看日历的习惯，就把要做的事情写到便签上放到日历旁边；如果你每天都使用电脑，可以把便签粘到显示器下面。手机闹钟、一些带有提醒功能的 APP 等等都可以。\n第六步：微量开始，超额完成\n我们在完成微习惯时消耗的是意志力，但是我们在达成目标后继续努力时动力就会开始起作用了。\n当你一旦开始，就会希望多完成一些。到那个时候，继续做和停下来一样容易。\n第七步：服从计划安排，拜托高期待值\n在第一步中，我们已经把习惯的难度定的非常低了，所以超额完成是很平常的事情，正如之前说到的，请把它作为一个奖励，不要把超额完成的部分作为你今后每天的目标，这是一个很危险的行为。读完两页书就是成功，句号！\n举个例子：你连续半个月每天都读了 30 页书，而不是 2 页书，于是理所当然的把微习惯改为了每天读 30 页书，但是一旦某天状态不佳或者因为一些其他因素导致没有完成 30 页书的目标，你建立起来的自信会受挫。不要嘴上说着读 2 页书就好，心里却把 30 页书作为目标。不要忘记你是如何做到读 30 页书的（是从每天 2 页书开始的）。\n坚持做一件小事，比偶尔做一件大事能从根本上改变更多。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n第八步：习惯养成的标志\n代表行为已经成为习惯的信号：\n没有抵触情绪：该行为似乎做起来容易，不做反而更难 身份：你打心底认同该行为，可以信心十足地说“我是个跑者” 行动时无需考虑：不需要做任何决定，自然而然地去做。 你不再担心：你知道你会一直做这件事。 常态化：习惯是非情绪化的。你开始你的微习惯时没有任何情绪波动，而不会因为你正在做这件事而“激动不已” 它很无聊：好的习惯并不会让人很兴奋，它只是对你有好处而已。你会因为它们对生活更有激情，但不是对行为本身。 7 微习惯策略的八大规则 1. 绝对不要自欺欺人\n比如觉得某项微习惯太小，觉得偶尔一天不做也没什么；或者给自己制定的微习惯是每天一个俯卧撑，却在心里偷偷要求自己完成更多。\n2. 满意每一个进步\n对小小的进步感到满意和标准低不是一回事。李小龙有一句名言可以很好地总结这一点：“要满意，但别满足”。\n微习惯策略的核心是一个很简单的大脑错觉，同时也是一种重视开始的生活哲理，一种认为行动优于动力的生活哲理，一种相信将每一小步积累起来便能让量变转为质变的生活哲理。\n3. 经常回报自己，尤其在完成微习惯之后\n哪怕在完成微习惯之后对自己说“你很棒”这一点小小的激励，最终都会建立一个正反馈循环。\n4. 保持头脑清醒\n可能坚持几个月的微习惯后你能看到比较大的变化，进而过度兴奋，但别让这种兴奋成为你实施行动的原动力。变得依赖动力或情绪正是导致很多习惯没有养成的原因。\n在完成目标的过程中，无聊才是常态。使用冷静的头脑分析你的行为。\n5. 感到强烈抵触时，后退并缩小目标\n常识告诉我们，突破才能获得进步，然而这只适用于短期目标，比如项目的 deadline，你需要逼一逼自己才能完成。但是对于养成一个习惯来说，保证我们可以长时间的坚持才是最重要的。\n如果你给自己制定的计划让你感到很痛苦，你需要考虑是这项行为本身的问题还是目标设立的太大了。养成习惯过程中有抵触情绪是正常的，但采用微习惯策略时假如你能感受到明显的抵触情绪，那一定要缩小目标。\n6. 提醒自己这件事很轻松\n在微习惯策略中，你对实施行动的抵触行为很多时候都是因为考虑的太宽泛，比如健身，这是一个听起来就比较有压力的行为。但是你想想你今天要做的仅仅是做一个俯卧撑，自然而然会感受到轻松。\n7. 绝不要小看微步骤\n每一个大的工程都是由无数个小步骤做成的。持续做一件很小的小事，坚持一段时间，反正又花不了你多长时间，大部分微习惯两分钟之内就能完成，你会慢慢看到效果的。\n8. 用多余精力超额完成任务，而不是制定更大的目标\n大目标在纸面上看着漂亮，但只有行动才算数。\n目标渺小、结果丰满。你是想要这样的结果，还是反过来？\n以上\n","permalink":"http://localhost:1313/en/posts/read/wei-xi-guan/","summary":"0 前言 书名《微习惯》，作者斯提芬·盖斯 [美]，江西人民出版社，译者桂君 微习惯是一种非常微小的积极行为，你需要每天强迫自己完成它。微习惯太小，小到不可能失败。正是因为这个特性，它不会给你造成任何负担，而且具有超强的“欺骗性”，它因此成了极具优势的习惯养成策略。 微习惯策略的科学原理表","title":"《微习惯》"},{"content":"0 前言 书名《人间失格》，北京燕山出版社，译者高艳\n1 语句摘录 人是不可能一边笑还一边紧紧攥着拳头的，只有猴子才会这样\n女人如果突然哭起来，只要让她们吃些好吃的东西，她们就会立刻好转\n越是对人感到恐惧的人，反倒越希望亲眼看到狰狞恐怖的怪物；越是胆小怯懦、神经兮兮的人，越是期盼暴风雨来的更猛烈一些\n世上所有人的说话方式，都喜欢这样绕圈子，不明说，也不说破，带着想逃避责任的心理，复杂又微妙\n我对死倒是不在乎，但如果因受伤变成残疾人，我是接受不了的\n“你喝太多酒了。”\n“不喝了！从明天起，我滴酒不沾了！”\n“真的？”\n“真的，我一定戒。假如我戒了，良子肯嫁给我吗？” 说要娶她的事，其实是一句玩笑话。\n“当然了。”\n“好，那我们就一言为定。我肯定戒酒”\n可第二天，我又照样从中午起便捏起酒盅来。傍晚时分，我摇摇晃晃走出酒馆，站在由子家的铺子前。\n“良子，对不起，我又喝酒了。”\n“哎呀，真讨厌，故意装成一副喝醉的样子。”\n我被她的话吓了一跳，酒一下子醒了许多。\n“不，是真的。我真喝酒了，不是故意装成喝醉的样子。”\n“别捉弄我，你真坏。” 她对我丝毫没有疑心。\n“你一看不就明白了？我今天又从中午开始喝酒了。原谅我！”\n“你演戏演得真像。”\n“不是演戏，你这个傻丫头！当心我亲你哦。”\n“亲呀！”\n“不，我没有资格亲你。要你嫁给我的事，就此作罢吧。你看我的脸，通红通红的是吧？我确实喝了。”\n“那是因为夕阳照在脸上的缘故，你骗我也没用的。因为我们昨天说定了，你不可能去喝酒的，你承诺过我，你却说自己喝酒了，肯定是在骗人、骗人、骗人！”\n","permalink":"http://localhost:1313/en/posts/read/ren-jian-shi-ge/","summary":"0 前言 书名《人间失格》，北京燕山出版社，译者高艳 1 语句摘录 人是不可能一边笑还一边紧紧攥着拳头的，只有猴子才会这样 女人如果突然哭起来，只要让她们吃些好吃的东西，她们就会立刻好转 越是对人感到恐惧的人，反倒越希望亲眼看到狰狞恐怖的怪物；越是胆小怯懦、神经兮兮的人，越是期盼暴风雨来的更猛","title":"《人间失格》"},{"content":" 标题说明: 月份 _ 当月跑步次数 _ 当月跑步距离\n2023 12_05_40 11_05_40 10_06_62 09_18_140 08_05_25 01-07_15_64 2022 12_01_5 11_08_51 10_16_100 09_13_123 0917 第一次半马 08_15_124 0827 第一次 15km 07_15_78 0728 第一次 10km 0706 第一次 5km 06_10_26 ","permalink":"http://localhost:1313/en/posts/life/running/","summary":"标题说明: 月份 _ 当月跑步次数 _ 当月跑步距离 2023 12_05_40 11_05_40 10_06_62 09_18_140 08_05_25 01-07_15_64 2022 12_01_5 11_08_51 10_16_100 09_13_123 0917 第一次半马 08_15_124 0827 第一次 15km 07_15_78 0728 第一次 10km 0706 第一次 5km 06_10_26","title":"跑步日常"},{"content":"\n🏡 关于本站 本博客主要记录一些学习生活，和一些个人觉得值得记录的问题及其解决办法。如果本博客能有哪些内容帮助到了你，那也是极好的。\n👦🏻 博主是谁 网络时代的素质教育漏网之鱼 | 晚睡协会常任理事 | 国家级抬杠运动员 | 中国驰名窝里横 | 国宝级老污龟 | 超水平怼人大师 | 一秒入戏准影帝\n精通CSS、JavaScript、PHP、C、C＋＋、C#、java、Ruby、Perl、Lisp、python等单词的拼写；\n熟悉windows、Linux、Mac、Android、IOS等系统的开关机；\n🏹 兴趣爱好 🏃‍♂️ 跑步 | 🎮️ 游戏 | 🎧 音乐 | 📺 动漫 | 🛌 摆烂\n📈 博客变更记录 2022年9月8日 本博客正式加入 十年之约\n今夕何夕，人生能有几个十年\n2022年7月16日 迁移之前发布在 csdn 的文章，将图片外链全部转为七牛图床\n2022年7月4日 hugo 站点试运行，域名：https://www.lvbibir.cn\n2021年8月15日 将阿里云轻量服务器自带的 wordpress 应用改为 docker 应用，wordpress 站点改为 docker-compose 部署\n2021年7月13日 wordpress 博客站点开始运行，域名：https://lvbibir.cn\n","permalink":"http://localhost:1313/en/about/","summary":"🏡 关于本站 本博客主要记录一些学习生活，和一些个人觉得值得记录的问题及其解决办法。如果本博客能有哪些内容帮助到了你，那也是极好的。 👦🏻 博主是谁 网络时代的素质教育漏网之鱼 | 晚睡协会常任理事 | 国家级抬杠运动员 | 中国驰名窝里横 | 国宝级老污龟 | 超水平怼人大师 | 一秒入戏准影帝 精通CSS、Ja","title":"🙋🏻‍♂️ 关于"},{"content":"👉友链为随机顺序 lvbibir\u0026#39;s Blog 我的 wordpress 站点 cuikx\u0026#39;s blog cuikx\u0026#39;s blog Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 陈桂林博客 成功最有效的方法就是向有经验的人学习！ 黄忠德的博客 DevOps,SRE,Python,Golang程序员,开源爱好者 阿虚同学的储物间 收集了很多实用网站 老生杂谈的 IT 人 老生杂谈，后继有人。 Yunyi’s Blog Little squirrel Hopping around 👉友链格式 名称: lvbibir's Blog\n网址: https://www.lvbibir.cn\n图标: https://www.lvbibir.cn/img/avatar.gif\n描述: life is a fucking movie\n👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告\n","permalink":"http://localhost:1313/en/links/","summary":"👉友链为随机顺序 lvbibir\u0026#39;s Blog 我的 wordpress 站点 cuikx\u0026#39;s blog cuikx\u0026#39;s blog Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 陈桂林博客 成功最有效的方法就是向有经验的人学习！ 黄忠德的博客 DevOps,SRE,Python,Golang程序员,开源爱好者 阿虚同学的储物间 收集了很多实用网站 老生杂谈的 IT 人 老生杂谈，后继有人。 Yunyi’s","title":"🤝 友链"},{"content":" ","permalink":"http://localhost:1313/en/talk/","summary":"","title":"💬 说说"},{"content":"0 前言 本文参考以下链接:\n从能用到好用-快速搭建高性能WordPress指南 前段时间着手开始搭建自己的 wordpress 博客，刚开始图方便直接买了阿里云的轻量应用服务器，它是一套预先搭建好的 lamp 架构，并已经做了一些初始化配置，直接访问 ip 就可以进行 wordpress 的安装和配置了。\n这套 wordpress 的一个非常好的优点就是可以在阿里云的控制台一键配置 https 证书，当然仅限在阿里云购买的 ssl 证书\n后续还是决定将 wordpress 整体迁移到 docker 中，全部服务都用 docker 跑。这样只要数据做好持久化，使用 docker 的灵活性会好很多，做全站备份和迁移也很方便。\n1 备份\u0026amp;迁移 wordpress 迁移起来还是比较方便的，需要备份的内容大概有这些：插件、主题、uploads、数据库\n备份插件：UpdraftPlus，这是一款个人使用过一款比较优秀的备份/迁移插件，免费版的功能基本满足大部分人需求，支持手动备份和定时备份、备份和恢复都支持部分备份，比如只备份数据库，只恢复数据库的某一张表。\n免费版的并不支持 wordpress 迁移，但我们可以通过导入导出备份文件的方式实现站点迁移，前提是做好测试。\n备份步骤：\n在备份插件中手动备份一次 下载备份文件 迁移步骤：\n准备好系统环境和 docker 环境（docker-compose） 启动 docker 容器 http 访问 wordpress 地址初始化安装 安装备份插件和 ssl 插件（really simple ssl） 上传备份文件并进行恢复操作（不恢复 wp-options 表） 为 nginx 反代服务器配置 ssl 证书，开启 https 访问 在 really simple ssl 中为 wordpress 启用 https 恢复 wp-options 表 1.1 手动备份\u0026amp;下载备份文件 备份完之后可以直接从 web 端下载，但是建议从 web 端下载一份，通过 ssh 或者 ftp 等方式再下载一份，避免备份文件出现问题\n备份的文件在 wordpress目录/wp-content/updraft 目录中\n通过 scp 下载到本地\n1.2 准备系统环境 安装好 docker 和 docker-compose 即可，docker 的安装和使用教程在本博客中 docker 分类有\n1.3 docker-compose 一键启动 wordpress 环境 这里我提供了一键部署的 docker-compose 文件和各服务进行了优化的配置文件，可以直接拿来用 下载链接\n注意：\n使用前建议修改数据库相关信息\n建议不要随意改动 ip\n所有的数据文件和配置文件默认都在当前的目录下\n如果前面不加 nginx 反代，记得把注释掉的端口映射改成自己想要的\n所有的配置文件都在 nginx 目录下，已经预先定义好，可以自行进行修改\n内置的 wordpress 目录权限用户和组是 33:tape\nversion: \u0026#39;3.1\u0026#39; services: proxy: image: superng6/nginx:debian-stable-1.18.0 container_name: nginx-proxy restart: always networks: wordpress_net: ipv4_address: 172.19.0.6 ports: - 80:80 - 443:443 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/conf/proxy/nginx.conf:/etc/nginx/nginx.conf - $PWD/conf/proxy/default.conf:/etc/nginx/conf.d/default.conf - $PWD/ssl:/etc/nginx/ssl - $PWD/logs/proxy:/var/log/nginx depends_on: - web web: image: superng6/nginx:debian-stable-1.18.0 container_name: wordpress-nginx restart: always networks: wordpress_net: ipv4_address: 172.19.0.5 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/conf/nginx/nginx.conf:/etc/nginx/nginx.conf - $PWD/conf/nginx/default.conf:/etc/nginx/conf.d/default.conf - $PWD/conf/fastcgi.conf:/etc/nginx/fastcgi.conf - /dev/shm/nginx-cache:/var/run/nginx-cache # - $PWD/nginx-cache:/var/run/nginx-cache - $PWD/wordpress:/var/www/html - $PWD/logs/nginx:/var/log/nginx depends_on: - wordpress wordpress: image: wordpress:5-fpm container_name: wordpress-php restart: always networks: wordpress_net: ipv4_address: 172.19.0.4 environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/wordpress:/var/www/html - /dev/shm/nginx-cache:/var/run/nginx-cache # - $PWD/nginx-cache:/var/run/nginx-cache - $PWD/conf/uploads.ini:/usr/local/etc/php/php.ini depends_on: - redis - db redis: image: redis:5 container_name: wordpress-redis restart: always networks: wordpress_net: ipv4_address: 172.19.0.3 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/redis-data:/data depends_on: - db db: image: mysql:5.7 container_name: wordpress-mysql restart: always networks: wordpress_net: ipv4_address: 172.19.0.2 environment: MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress MYSQL_RANDOM_ROOT_PASSWORD: \u0026#39;1\u0026#39; volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/mysql-data:/var/lib/mysql - $PWD/conf/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf networks: wordpress_net: driver: bridge ipam: config: - subnet: 172.19.0.0/16 进入到 wordpress-blog 目录下使用 docker-compose up -d 启动 docker 容器\n1.4 配置 nginx 反向代理 配置 80 和 443 端口的反代\n把域名、证书路径以及后端服务器等信息换成自己的\n免费 ssl 证书的申请我在 阿里云wordpress配置免费ssl证书 中介绍过，直接下载 nginx 版的证书放到 wordpress-blog/ssl/目录下即可\n[root@lvbibir ~]# vim wordpress-blog/conf/proxy/default.conf server { listen 80; listen [::]:80; server_name lvbibir.cn; # return 301 https://$host$request_uri; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-Port $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $host; proxy_set_header X-NginX-Proxy true; } } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name lvbibir.cn; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; # 保证获取到真实IP proxy_set_header X-Real-IP $remote_addr; # 真实端口号 proxy_set_header X-Real-Port $remote_port; # X-Forwarded-For 是一个 HTTP 扩展头部。 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 在多级代理的情况下，记录每次代理之前的客户端真实ip proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; # 获取到真实协议 proxy_set_header X-Forwarded-Proto $scheme; # 真实主机名 proxy_set_header Host $host; # 设置变量 proxy_set_header X-NginX-Proxy true; # 开启 brotli proxy_set_header Accept-Encoding \u0026#34;gzip\u0026#34;; } # 日志 access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; # 证书 ssl_certificate /etc/nginx/ssl/lvbibir.cn.pem; ssl_certificate_key /etc/nginx/ssl/lvbibir.cn.key; # curl https://ssl-config.mozilla.org/ffdhe2048.txt \u0026gt; /path/to/dhparam # ssl_dhparam /etc/nginx/ssl/dhparam; # HSTS (ngx_http_headers_module is required) (63072000 seconds) add_header Strict-Transport-Security \u0026#34;max-age=63072000\u0026#34; always; # OCSP stapling ssl_stapling on; ssl_stapling_verify on; # verify chain of trust of OCSP response using Root CA and Intermediate certs # ssl_trusted_certificate /etc/nginx/ssl/all.sleele.com/fullchain.cer; # replace with the IP address of your resolver resolver 223.5.5.5; resolver_timeout 5s; } [root@lvbibir ~]# docker exec -i nginx-proxy nginx -s reload 1.5 安装 wordpress 现在已经可以通过 http 访问 nginx 反代的 80 端口访问 wordpress 了\n安装信息跟之前站点设置一样即可\n1.6 恢复备份 安装好之后启用插件，把备份文件上传到备份目录\n记得修改权限\n[root@lvbibir ~]# chown -R 33:tape wordpress-blog/wordpress/wp-content/ 恢复备份\n注：如果站点之前开启了 https，在这步不要恢复 wp-options 表，不然会导致后台访问不了\n点击恢复即可\n1.7 配置 ssl 启用 really simple ssl 插件，因为之前在 nginx 反代配置了 ssl 证书，虽然我们没有通过 https 访问，但是这个插件已经检测到了证书，可以一键为 wordpress 配置 ssl\n这里我们已经可以通过 https 访问我们的 wordpress 了\n站点路径该插件也会自动修改，之前不恢复 wp-options 表的原因就在这，在我们没有配置好 ssl 之前，直接覆盖 wordpress 的各项设置会导致站点访问不了，重定向循环等各种各样的问题。\n1.8 恢复 wp-options 表 开启了 ssl 之后，通过备份插件再恢复一次，可以只恢复一张 wp-options 表，也可以再全量恢复下数据库，至此，站点迁移工作基本完成了。\n2 后续优化 2.1 开启 https 强制跳转 开启 https 强制跳转后，所有使用 http 访问我们站点的请求都会转到 https，提高站点安全性\n[root@lvbibir ~]# vim /etc/nginx/nginx.conf server { listen 80; listen [::]:80; server_name lvbibir.cn; return 301 https://$host$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name lvbibir.cn; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; # 保证获取到真实IP proxy_set_header X-Real-IP $remote_addr; # 真实端口号 proxy_set_header X-Real-Port $remote_port; # X-Forwarded-For 是一个 HTTP 扩展头部。 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 在多级代理的情况下，记录每次代理之前的客户端真实ip proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; # 获取到真实协议 proxy_set_header X-Forwarded-Proto $scheme; # 真实主机名 proxy_set_header Host $host; # 设置变量 proxy_set_header X-NginX-Proxy true; # 开启 brotli proxy_set_header Accept-Encoding \u0026#34;gzip\u0026#34;; } # 日志 access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; # 证书 ssl_certificate /etc/nginx/ssl/lvbibir.cn.pem; ssl_certificate_key /etc/nginx/ssl/lvbibir.cn.key; # curl https://ssl-config.mozilla.org/ffdhe2048.txt \u0026gt; /path/to/dhparam # ssl_dhparam /etc/nginx/ssl/dhparam; # HSTS (ngx_http_headers_module is required) (63072000 seconds) add_header Strict-Transport-Security \u0026#34;max-age=63072000\u0026#34; always; # OCSP stapling ssl_stapling on; ssl_stapling_verify on; # verify chain of trust of OCSP response using Root CA and Intermediate certs # ssl_trusted_certificate /etc/nginx/ssl/all.sleele.com/fullchain.cer; # replace with the IP address of your resolver resolver 223.5.5.5; resolver_timeout 5s; } [root@lvbibir ~]# docker exec -i nginx-proxy nginx -s reload 2.2 开启 redis 缓存 wordpress搭配redis加速网站访问速度\n2.3 搭配 jsdelivr-CDN 实现全站 cdn WordPress+jsDelivr开启伪全站CDN\n以上\n","permalink":"http://localhost:1313/en/posts/blog/wordpress-to-docker/","summary":"0 前言 本文参考以下链接: 从能用到好用-快速搭建高性能WordPress指南 前段时间着手开始搭建自己的 wordpress 博客，刚开始图方便直接买了阿里云的轻量应用服务器，它是一套预先搭建好的 lamp 架构，并已经做了一些初始化配置，直接访问 ip 就可以进行 wordpress 的安装和配置了。 这套 wordpress 的一个非常好的优点就是可以在阿","title":"wordpress | 迁移到 docker"},{"content":"1 七牛云配置 1.1 注册七牛云，新建存储空间 七牛云新用户有 10G 的免费空间，作为个人博客来说基本足够了\n1.2 为存储空间配置加速域名 1.3 配置 https 证书 1.3.1 购买免费证书 1.3.2 补全域名信息 1.3.3 域名验证 根据在域名提供商处新建解析\ndns 配置好之后等待 CA 机构审核后颁发证书就可以了\n1.4.4 开启 https 2 PicGo 配置 2.1 下载安装 下载链接：https://github.com/Molunerfinn/PicGo/releases/\n建议下载稳定版\n2.2 配置七牛云图床 ak 和 sk 在七牛云→个人中心→密钥管理中查看\n在 picgo 端配置各项信息，注意网址要改成 https\n3 typora 测试图片上传 下载地址：https://www.typora.io/\n在文件→偏好设置→图像中配置图片上传，选择安装好的 PicGo 的应用程序\n点击验证图片上传\n到七牛云存储空间看是否有这两个文件\ntypora 可以实现自动的图片上传，并将本地连接自动转换为外链地址\n4 可能的报错 一般报错原因都可在 picgo 的日志文件找到，路径：C:\\Users\\username\\AppData\\Roaming\\picgo\n4.1 failed to fetch 日志报错如下\n问题在于端口冲突，如果你打开了多个 picgo 程序，就会端口冲突，picgo 自动帮你把 36677 端口改为 366771 端口，导致错误。\n重新验证\n以上\n","permalink":"http://localhost:1313/en/posts/blog/typora-picgo-qiniu-upload-image/","summary":"1 七牛云配置 1.1 注册七牛云，新建存储空间 七牛云新用户有 10G 的免费空间，作为个人博客来说基本足够了 1.2 为存储空间配置加速域名 1.3 配置 https 证书 1.3.1 购买免费证书 1.3.2 补全域名信息 1.3.3 域名验证 根据在域名提供商处新建解析 dns 配置好之后等待 CA 机构审核后颁发证书就可以了 1.4.4 开启 https 2 PicGo 配置 2.1 下载安装 下载链接：http","title":"markdown 图片存储方案 | typora + picgo + 七牛云"},{"content":"1 现象 博客加载不出来我在七牛云的图片资源 使用浏览器直接访问图片 url 却是可以成功的 我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。 使用浏览器直接访问图片 url 却是可以成功的\n我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。\n2 排查 1、由于浏览器直接访问七牛云图床的 url 地址是可以访问的，证明地址并没错，有没有可能是 referer 防盗链的配置问题\n查看防盗链配置，并没有开\n2、wordpress 可以加载出来 csdn 的外链图片，期间也试了其他图床都是没问题的。\n3、看看七牛的图片外链和 csdn 的有何区别\n注意到七牛的图片外链是 http，当时嫌麻烦并没有配置 https，看来问题是出在这了\n因为我的网站配置了 ssl 证书，可能由于安全问题浏览器不予加载 http 项目，用 http 访问站点测试下图片是否可以加载\n访问成功了！\n3 解决 给图床服务器安装 ssl 证书，开启 https 访问，参考：typora-picgo-qiniu-upload-image\n以上\n","permalink":"http://localhost:1313/en/posts/blog/wordpress-load-image-failed/","summary":"1 现象 博客加载不出来我在七牛云的图片资源 使用浏览器直接访问图片 url 却是可以成功的 我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。 使用浏览器直接访问图片 url 却是可以成功的 我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。","title":"wordpress | 加载图片失败"},{"content":"默认主题下在后台设置里修改即可\ndux 主题修改方式：在后台管理→dux 主题编辑器→网站底部信息中添加\n\u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;京ICP备2021023168号-1\u0026lt;/a\u0026gt; 通用修改方式\n在主题目录的 footer.php 文件中的 \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; 下添加代码\n\u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;你的备案号\u0026lt;/a\u0026gt; 以上\n","permalink":"http://localhost:1313/en/posts/blog/wordpress-add-icp/","summary":"默认主题下在后台设置里修改即可 dux 主题修改方式：在后台管理→dux 主题编辑器→网站底部信息中添加 \u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;京ICP备2021023168号-1\u0026lt;/a\u0026gt; 通用修改方式 在主题目录的 footer.php 文件中的 \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; 下添加代码 \u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=","title":"wordpress | 添加 icp 备案号"},{"content":"0 前言 本文参考以下链接:\n在 Apache 服务器上安装 SSL 证书 WordPress 强制跳转 https 教程 1 配置 ssl 证书 1、登录阿里云，选择产品中的 ssl 证书\n如果域名是阿里的他会自动创建 dns 解析，如果是其他厂商需要按照图片配置，等待几分钟进行验证\n点击审核，等待签发\n签发后根据需求下载所需证书\n我的 wordpress 是直接买的阿里轻量应用服务器，打开轻量应用服务器的控制台配置域名\n选择刚申请好的 ssl 证书\n在 wordpress 后台修改地址\n大功告成\n2 配置 https 强制跳转 一般站点需要在 httpd.conf 中的 \u0026lt;VirtualHost *:80\u0026gt; \u0026lt;/VirtualHost\u0026gt; 中配置重定向\nwordpress 不同，需要在伪静态文件（.htaccess）中配置重定向，无需在 httpd.conf 中配置\n2.1 修改伪静态文件（.htaccess） 伪静态文件一般在网页根目录，是一个隐藏文件\n在 #END Wordpress 前添加如下重定向代码，记得把域名修改成自己的\nRewriteEngine On RewriteCond %{HTTPS} !on RewriteRule ^(.*)$ https://lvbibir.cn/%{REQUEST_URI} [L,R=301] 图中两段重定向代码略有不同\n第一段代码重定向触发器：当访问的端口不是 443 时进行重定向重定向规则：重定向到：https://{原域名}/{原 url 资源} 第二段代码重定向触发器：当访问的协议不是 TLS/SLL（https）时进行重定向重定向规则：重定向到：https://lvbibir.cn/{原 url 资源} 第一段代码使用端口判断，第二段代码通过访问方式判断，建议使用访问方式判断，这样服务改了端口也可以正常跳转 第一段代码重定向的原先的域名，第二段代码可以把 ip 地址重定向到指定域名 2.2 测试 curl -I http://lvbibir.cn 使用 http 访问站点的 80 端口成功通过 301 跳转到了 https\n以上\n","permalink":"http://localhost:1313/en/posts/blog/wordpress-ssl/","summary":"0 前言 本文参考以下链接: 在 Apache 服务器上安装 SSL 证书 WordPress 强制跳转 https 教程 1 配置 ssl 证书 1、登录阿里云，选择产品中的 ssl 证书 如果域名是阿里的他会自动创建 dns 解析，如果是其他厂商需要按照图片配置，等待几分钟进行验证 点击审核，等待签发 签发后根据需求下载所需证书 我的 wordpress 是直接买的阿里轻量应用服务器，打开轻","title":"wordpress | 配置免费 ssl 证书和 https 强制跳转"}]